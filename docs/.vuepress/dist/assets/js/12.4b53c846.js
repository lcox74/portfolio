(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{370:function(t,s,a){t.exports=a.p+"assets/img/selene_example.02dc4324.png"},404:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"page-title"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#page-title"}},[t._v("#")]),t._v(" "+t._s(t.$page.title))]),t._v(" "),n("blockquote",[n("p",[t._v("07-02-2021")])]),t._v(" "),n("p",[t._v("This project was inspired by an existing project called "),n("a",{attrs:{href:"https://github.com/JamesDearlove/Selene",target:"_blank",rel:"noopener noreferrer"}},[t._v("Selene"),n("OutboundLink")],1),t._v(", something my friend "),n("a",{attrs:{href:"https://jamesdearlove.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("James Dearlove"),n("OutboundLink")],1),t._v(" was developing. James was developing Selene using .NET and utilising the Windows 10 Runtime API. Because of this Selene will only work for Windows 10 1809 (Build 17763) or newer.")]),t._v(" "),n("p",[t._v("Because of this, and also because I really like C++, I had a thought... "),n("code",[t._v("What if Selene was C++ now")]),t._v(" this thought lead me to delve into the depths of the Win32 API and regret starting this project.")]),t._v(" "),n("h2",{attrs:{id:"_0x00-why-do-this-project"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_0x00-why-do-this-project"}},[t._v("#")]),t._v(" 0x00: Why do this project")]),t._v(" "),n("p",[t._v("When James started working on Selene I thought it looked absolutely amazing, the design was slick and with the right desktop background it made Windows look like something special. Yes you can do similar stuff with "),n("a",{attrs:{href:"https://www.rainmeter.net/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Rainmeter"),n("OutboundLink")],1),t._v(" but James made this himself. If you didn't look at the "),n("a",{attrs:{href:"https://github.com/JamesDearlove/Selene",target:"_blank",rel:"noopener noreferrer"}},[t._v("Selene"),n("OutboundLink")],1),t._v(" repo, its essentially a thin bar at the top of your display with the middle section showing what song you are currently listening along with a pop out media controller. Other features included showing your battery level, time and some miscellaneous buttons all with clean looking glyphs.")]),t._v(" "),n("p",[n("img",{attrs:{src:a(370),alt:"Selene Example"}})]),t._v(" "),n("h2",{attrs:{id:"_0x01-starting-this-project"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_0x01-starting-this-project"}},[t._v("#")]),t._v(" 0x01: Starting this project")]),t._v(" "),n("p",[t._v("I started this project with a name, Helios. I picked this name as Selene is the Greek Goddess of the Moon while Helios is the Greek God of the Sun. James figured I would name it that. After naming it I was able to start an empty C++ Visual Studios Project. To be able to do this project, I needed to do 3 main things:")]),t._v(" "),n("ul",[n("li",[t._v("Something to render with")]),t._v(" "),n("li",[t._v("Render fonts")]),t._v(" "),n("li",[t._v("Register the window as a taskbar using the win32")])]),t._v(" "),n("p",[t._v("For the renderer I decided to use a basic "),n("a",{attrs:{href:"https://libsdl.org/index.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("SDL"),n("OutboundLink")],1),t._v(" setup. Create a window, Have a buffer to manually write to, push the buffer to the window. I will go over this more in my Greyhound project, I'm planning on integrating that into this when it gets more developed. For rendering fonts I did use the "),n("a",{attrs:{href:"https://www.libsdl.org/projects/SDL_ttf/",target:"_blank",rel:"noopener noreferrer"}},[t._v("SDL_TTF"),n("OutboundLink")],1),t._v(" library as it works nicely with SDL but I did have to write a reasource manager to handle using mutliple fonts at different sizes as I wanted to minimise the amount of times the program had to read a font file.")]),t._v(" "),n("p",[t._v("Rendering the glyphs that James used in Selene had me stumpped for a while, as I thought it had something to do with the other font rendering calls avaliable with SDL_ttf like "),n("code",[t._v("TTF_RenderUTF8()")]),t._v(", "),n("code",[t._v("TTF_RenderUNICODE()")]),t._v(", "),n("code",[t._v("TTF_RenderGlyph()")]),t._v(". Turns out the glyphs that Microsoft uses for their stuff is its own font called "),n("a",{attrs:{href:"https://docs.microsoft.com/en-us/windows/uwp/design/style/segoe-ui-symbol-font",target:"_blank",rel:"noopener noreferrer"}},[t._v("Segoe MDL2"),n("OutboundLink")],1),t._v(" which if you have a windows machine you can find it in the "),n("code",[t._v("C:/Windows/Font")]),t._v(" directory.")]),t._v(" "),n("p",[t._v("Now that I have the main rendering part down pack all I need to do now is the hard part... reading the Microsoft Win32 API Documentation.")]),t._v(" "),n("h2",{attrs:{id:"_0x02-registering-an-app-bar"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_0x02-registering-an-app-bar"}},[t._v("#")]),t._v(" 0x02: Registering an App Bar")]),t._v(" "),n("p",[t._v("This was relatively easy to do, but was incredibly painful to try and figure out. Alot of the documentation seemed to really want you to use C# these days and also the Runtime library which are both things I didn't want to use. The Runtime library is what made Selene stuck with the Windows 10 1809 (Build 17763) or newer limitation.")]),t._v(" "),n("p",[t._v("I eventually caved in and looked at James' code to see what he did. He used an external library called "),n("a",{attrs:{href:"https://github.com/PhilipRieck/WpfAppBar",target:"_blank",rel:"noopener noreferrer"}},[t._v("WpfAppBar"),n("OutboundLink")],1),t._v(", which after reading lead me to Windows Shellapi.h but more specifically the "),n("a",{attrs:{href:"https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shappbarmessage",target:"_blank",rel:"noopener noreferrer"}},[t._v("SHAppBarMessage"),n("OutboundLink")],1),t._v(" call.")]),t._v(" "),n("p",[t._v("This was a great discovery for the project as all I have to do now is use "),n("code",[t._v("SHAppBarMessage()")]),t._v(" to register an "),n("code",[t._v("appbar")]),t._v(" then I would be able to set the position and size of it, though check to see if the space is ooccupied and if it is occupied then it would try and get the next best position). The checking space occupied thing explained why when you were able to run selene more than once they dont all go to the top but stack, but if you force them all to go to the top Windows will really bug out.")]),t._v(" "),n("p",[t._v("Below is an the code required to register the "),n("code",[t._v("appbar")]),t._v(" as well as another function to position and size it.")]),t._v(" "),n("div",{staticClass:"language-C extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The application needs to be registered as an App Bar to be used like a seperate task bar")]),t._v("\nbool "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("RegisterAppBar")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SDL_Window"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bool register_state"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Set the windows message callback to an unreserved number")]),t._v("\n    app_bar_callback "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("WM_USER "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x01")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    data "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("APPBARDATA")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Set basics of the appbar data")]),t._v("\n    data"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("cbSize "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("APPBARDATA"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Set window handle")]),t._v("\n    data"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("hWnd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetWindowHandle")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("hWnd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" nullptr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" false"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Register the App Bar")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("register_state"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Set the App Bar&#x27;s winows message callback")]),t._v("\n        data"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("uCallbackMessage "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" app_bar_callback"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Register the app bar, return false if it failed")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("SHAppBarMessage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ABM_NEW"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" false"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Set stats")]),t._v("\n        app_bar_registered "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" true"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Un-Register the App Bar from the windows shell API")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("SHAppBarMessage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ABM_REMOVE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        app_bar_registered "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" true"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Set a registered App Bar to be fixed to a particular side of the screen")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" PASCAL "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("AppBarSetPos")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SDL_Window"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" desired_size "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Error Checking")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("app_bar_registered "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" false"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("RegisterAppBar")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" true"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    data"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    data"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("uEdge "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ABE_TOP"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Set window handle")]),t._v("\n    data"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("hWnd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetWindowHandle")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("hWnd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" nullptr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Set the window to the specific edge")]),t._v("\n    height "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" desired_size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    data"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    data"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetSystemMetrics")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SM_CXSCREEN"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Check if the size and position is valid")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("SHAppBarMessage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ABM_QUERYPOS"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Adjust window size to fit the appropriate edge")]),t._v("\n    data"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bottom "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" data"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("top "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" height"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Check the window rect bound with the system")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("SHAppBarMessage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ABM_SETPOS"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Set the winow")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("MoveWindow")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("hWnd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n                           data"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("top"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n                           data"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" data"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n                           data"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bottom "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" data"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("top"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" true"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"_0x03-fetching-music"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_0x03-fetching-music"}},[t._v("#")]),t._v(" 0x03: Fetching music")]),t._v(" "),n("p",[t._v("Now that I had the "),n("code",[t._v("appbar")]),t._v(" registered and the window positioned where I wanted it, it was time to get the active music. James used the Runtime to get all active media which would have been amazing, but for Helios, Spotify will be its only location for music (for now). Spotify is very friendly and helps with this as the window name for spotify changes to the current playing song.")]),t._v(" "),n("p",[t._v("So what I needed to do was to find the Spotify process and get the window name. I had to go through multiple different iterations of process searching because of a lot of memory leak issues, at one point I was using +100MB of memory every couple of seconds. But it's now fixed and works smoothly. Below is the code I used:")]),t._v(" "),n("div",{staticClass:"language-C extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" current_search"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" Helios"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Process"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetWindowNameByProcessName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Set the process to search")]),t._v("\n    current_search "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Get the window handle for the target process")]),t._v("\n    HWND desired_hWnd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nullptr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    bool search "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("EnumWindows")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("EnumWindowCallback"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LPARAM"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("desired_hWnd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("search"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Get the window title from the window handle")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetWindowTextLength")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("desired_hWnd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" buffer "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("malloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetWindowTextA")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("desired_hWnd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buffer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Return the window name")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" buffer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nBOOL Helios"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Process"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("EnumWindowCallback")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HWND hWnd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" LPARAM lparam"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Cull processes that are definetly not the target")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetWindowTextLength")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hWnd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsWindowVisible")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hWnd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Get the process ID")]),t._v("\n        DWORD pid"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        DWORD actual_proc_id "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetWindowThreadProcessId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hWnd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("pid"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Check if the process name is the target process")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("strstr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ProcessIdToName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pid"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" current_search"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Pass a reference back through the LPARAM and terminate the search")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// to save on compute cycles")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HWND"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lparam"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hWnd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" FALSE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Continue search")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" TRUE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" Helios"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Process"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ProcessIdToName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DWORD pid"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Get a handle for the process to read")]),t._v("\n    CHAR process_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAX_PATH"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    HANDLE handle "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("OpenProcess")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PROCESS_QUERY_INFORMATION "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" PROCESS_VM_READ"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" FALSE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pid"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    HMODULE module_handle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    DWORD required_bytes_to_store_lphModule"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Check if process handle was created")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" handle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Get the module handles, check if it failed")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("EnumProcessModules")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("module_handle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("module_handle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n                               "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("required_bytes_to_store_lphModule"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Get the process name")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetModuleBaseNameA")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" module_handle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" process_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n                               "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CHAR"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Close handle to prevent leak")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("CloseHandle")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" process_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("For an explanation I had to use the "),n("code",[t._v("winuser.h")]),t._v(" library to to get all the top-level windows on the screen, convert the "),n("code",[t._v("PIDs")]),t._v(" (Process Ids) to the process name using "),n("code",[t._v("psapi.h")]),t._v(" to search for the window with the target process which returned the "),n("code",[t._v("HWND")]),t._v(" which allowed me to use "),n("code",[t._v("GetWindowTextA()")]),t._v(" to get the window name.")]),t._v(" "),n("MyFooter")],1)}),[],!1,null,null,null);s.default=e.exports}}]);